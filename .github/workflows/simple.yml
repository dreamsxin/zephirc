name: build

on:
  push:
    branches-ignore:
      - 'wip-*'
  pull_request:
    branches:
      - 'master'

jobs:
  simple_build:

    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        name:
          - ubuntu-18.04-gcc-7
          - ubuntu-18.04-clang-5.0
          - macOS-latest

        include:
          - name: ubuntu-18.04-gcc-7
            os: ubuntu-18.04
            compiler: gcc
            libcxx: libstdc++11
            version: '7'
            ccov: ON
            gcov: gcov
            weffcpp: ON
          - name: ubuntu-18.04-clang-5.0
            os: ubuntu-18.04
            compiler: clang
            libcxx: libstdc++11
            version: '5.0'
            ccov: ON
            gcov: "$GITHUB_WORKSPACE/.ci/llvm-gcov.sh"
            weffcpp: OFF
          - name: macOS-latest
            os: macOS-latest
            compiler: apple-clang
            libcxx: libc++
            version: '11.0'
            ccov: ON
            gcov: gcov
            weffcpp: OFF

    steps:
    - uses: actions/checkout@v2-beta
      with:
        fetch-depth: 5

    - name: Setup Prerequisites (Linux)
      if: runner.os == 'Linux'
      run: |
        # E: Repository 'https://packages.microsoft.com/repos/microsoft-ubuntu-bionic-prod bionic InRelease'
        # changed its 'Origin' value from 'microsoft-ubuntu-bionic-prod bionic' to 'vscode stable'
        sudo rm -f /etc/apt/sources.list.d/dotnetdev.list

        echo 'debconf debconf/frontend select Noninteractive' | sudo debconf-set-selections
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test --yes
        sudo apt-get update --quiet --yes 1>/dev/null

        if [ "${{ matrix.ccov }}" = "ON" ]; then
          sudo apt-get install --no-install-recommends -q -y lcov
        fi

        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          sudo apt-get install --no-install-recommends -q -y gcc-${{ matrix.version }}
          echo "::set-env name=CC::gcc-${{ matrix.version }}"
          echo "::set-env name=CXX::g++-${{ matrix.version }}"
        else
          sudo apt-get install --no-install-recommends -q -y \
            clang-${{ matrix.version }} llvm-${{ matrix.version }}
          sudo update-alternatives --install /usr/bin/llvm-cov llvm-cov \
            /usr/bin/llvm-cov-${{ matrix.version }} 90

          echo "::set-env name=CC::clang-${{ matrix.version }}"
          echo "::set-env name=CXX::clang++-${{ matrix.version }}"
        fi

    - name: Setup Prerequisites (macOS)
      if: runner.os == 'macOS'
      run: |
        sudo xcode-select -switch /Applications/Xcode.app

        brew update --quiet >& /dev/null

        packages=(cmake)
        if [ "${{ matrix.ccov }}" = "ON" ]; then
          packages+=(lcov)
        fi

        for pkg in $packages; do
          if brew list -1 | grep -q "^${pkg}\$"; then
            brew outdated $pkg || brew upgrade $pkg;
          else
            brew install $pkg;
          fi
        done

        echo "::set-env name=CC::$(xcrun -f clang)"
        echo "::set-env name=CXX::$(xcrun -f clang++)"
        echo "::set-env name=SDKROOT::$(xcodebuild -version -sdk macosx Path)"
        echo "::set-env name=PATH::$(dirname $(xcrun -f clang)):$PATH"

    - uses: actions/cache@v1
      name: Setup conan cache
      id: conan-cache
      with:
        path: ~/.conan
        key: ${{ runner.os }}-conan-${{ matrix.compiler }}-${{ hashFiles('**/conanfile.txt') }}
        restore-keys: |
          ${{ runner.os }}-conan-${{ matrix.compiler }}-

    - name: Setup Python
      uses: actions/setup-python@v1
      with:
        version: 3.8
        architecture: x64

    - name: Get pip cache
      id: pip-cache
      run: |
        python -c "from pip._internal.locations import USER_CACHE_DIR; print('::set-output name=dir::' + USER_CACHE_DIR)"

    - uses: actions/cache@v1
      name: Setup pip cache
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

        if [ ! -f "$HOME/.conan/profiles/zephir" ]; then
          conan profile new zephir --detect
        fi

        conan profile update settings.build_type=Debug zephir
        conan profile update settings.compiler=${{ matrix.compiler }} zephir
        conan profile update settings.compiler.version=${{ matrix.version }} zephir
        conan profile update settings.compiler.libcxx=${{ matrix.libcxx }} zephir

        conan install $(pwd) -if=$(pwd)/build -pr=zephir --build=missing

    - name: Configure x64 Debug
      run: |
        $CC --version
        cmake --version

        cmake \
          -S . \
          -Bbuild \
          -DCMAKE_BUILD_TYPE=Debug \
          -DZEPHIR_BUILD_TESTING=ON \
          -DENABLE_ALL_WARNINGS=ON \
          -DCODE_COVERAGE=${{ matrix.ccov }} \
          -DENABLE_EFFECTIVE_CXX=${{ matrix.weffcpp }}

    - name: Build with ${{ matrix.compiler }}
      run: cmake --build build -j "$(getconf _NPROCESSORS_ONLN)"

    - name: Run tests
      run: cmake --build build --target check

    - name: Capture coverage data
      if: matrix.ccov == 'ON'
      run: |
        cmake --build build --target gcov
        cmake --build build --target lcov

    - name: Upload code coverage report
      if: matrix.ccov == 'ON'
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./build/ccov/data/capture/all-targets.info
        yml: ./.codecov.yml
        name: codecov-umbrella
        flags: unittests
        fail_ci_if_error: false
