name: build

on:
  push:
    paths-ignore:
      - '**.md'
      - '**.txt'
  pull_request:
    branches:
      - master

jobs:
  simple_build:

    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        name:
          - linux-gcc-7
          - linux-clang-5.0
          - macOS-latest

        include:
          - name: linux-gcc-7
            os: ubuntu-18.04
            compiler: gcc
            libcxx: libstdc++11
            version: '7'
            ccov: ON
            gcov: gcov

          - name: linux-clang-5.0
            os: ubuntu-18.04
            compiler: clang
            libcxx: libstdc++11
            version: '5.0'
            ccov: ON
            gcov: "$GITHUB_WORKSPACE/.ci/llvm-gcov.sh"

          - name: macOS-latest
            os: macOS-latest
            compiler: apple-clang
            libcxx: libc++
            version: '11.0'
            ccov: ON
            gcov: gcov

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2-beta
      with:
        fetch-depth: 5

    - name: Setup Prerequisites (Linux)
      if: startsWith(runner.os, 'Linux')
      run: |
        # We don't need this at all, and our
        # builds often fails because Microsoft
        # servers are unstable or even offline.
        sudo rm -f /etc/apt/sources.list.d/dotnetdev.list
        sudo rm -f /etc/apt/sources.list.d/azure*.list

        echo 'debconf debconf/frontend select Noninteractive' | sudo debconf-set-selections
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test --yes
        sudo apt-get update --quiet --yes 1>/dev/null

        if [ "${{ matrix.ccov }}" = "ON" ]; then
          sudo apt-get install --no-install-recommends -q -y lcov
        fi

        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          sudo apt-get install --no-install-recommends -q -y gcc-${{ matrix.version }}
          echo "::set-env name=CC::gcc-${{ matrix.version }}"
          echo "::set-env name=CXX::g++-${{ matrix.version }}"
        else
          sudo apt-get install --no-install-recommends -q -y \
            clang-${{ matrix.version }} llvm-${{ matrix.version }}
          sudo update-alternatives --install /usr/bin/llvm-cov llvm-cov \
            /usr/bin/llvm-cov-${{ matrix.version }} 90

          echo "::set-env name=CC::clang-${{ matrix.version }}"
          echo "::set-env name=CXX::clang++-${{ matrix.version }}"
        fi

    - name: Setup Prerequisites (macOS)
      if: startsWith(runner.os, 'macOS')
      run: |
        sudo xcode-select -switch /Applications/Xcode.app

        brew install lcov
        # brew update --quiet >& /dev/null
        #
        # packages=(cmake)
        # if [ "${{ matrix.ccov }}" = "ON" ]; then
        #   packages+=(lcov)
        # fi
        #
        # for pkg in $packages; do
        #   if brew list -1 | grep -q "^${pkg}\$"; then
        #     brew outdated $pkg || brew upgrade $pkg;
        #   else
        #     brew install $pkg;
        #   fi
        # done

        echo "::set-env name=CC::$(xcrun -f clang)"
        echo "::set-env name=CXX::$(xcrun -f clang++)"
        echo "::set-env name=SDKROOT::$(xcodebuild -version -sdk macosx Path)"
        echo "::set-env name=PATH::$(dirname $(xcrun -f clang)):$PATH"

    - name: Setup Python
      uses: actions/setup-python@v1
      with:
        version: 3.8
        architecture: x64

    - name: Get PIP Cache Key
      id: pip-cache
      run: |
        python -c "from pip._internal.locations import USER_CACHE_DIR; \
                   print('::set-output name=dir::' + USER_CACHE_DIR)"

    - name: Setup PIP Cache
      uses: actions/cache@v1
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

        if [ "${{ matrix.ccov }}" = "ON" ]; then
            pip install gcovr
        fi

    - name: Setup Conan Cache
      uses: actions/cache@v1
      id: conan-cache
      with:
        path: ~/.conan/data
        key: ${{ runner.os }}-conan-${{ matrix.compiler }}-${{ hashFiles('**/conanfile.txt') }}
        restore-keys: |
          ${{ runner.os }}-conan-${{ matrix.compiler }}-

    - name: Install Conan Dependencies
      run: |
        # Remove default profile (if any)
        conan profile remove default 2>/dev/null || true
        conan profile new default --detect

        conan profile update settings.build_type=Debug default
        conan profile update settings.compiler=${{ matrix.compiler }} default
        conan profile update settings.compiler.version=${{ matrix.version }} default
        conan profile update settings.compiler.libcxx=${{ matrix.libcxx }} default

        conan install $(pwd) -if=$(pwd)/build -pr=default --build=missing


    - name: Configure x64 Debug
      run: |
        $CC --version
        cmake --version

        cmake \
          -S . \
          -Bbuild \
          -DCMAKE_BUILD_TYPE=Debug \
          -DZEPHIR_BUILD_TESTING=ON \
          -DWARNINGS_AS_ERRORS=ON \
          -DCODE_COVERAGE=${{ matrix.ccov }}

    - name: Build with ${{ matrix.compiler }}
      run: cmake --build build -j "$(getconf _NPROCESSORS_ONLN)"

    - name: Run Tests
      run: cmake --build build --target check -j "$(getconf _NPROCESSORS_ONLN)"

    - name: Capture Coverage Data
      if: matrix.ccov == 'ON'
      run: |
        cmake --build build --target gcov
        cmake --build build --target lcov
        gcovr -r . --branches --exclude-unreachable-branches --filter src/ --xml-pretty --xml ./build/ccov/data/capture/cobertura.xml

    - name: Upload Code Coverage Report
      if: matrix.ccov == 'ON'
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./build/ccov/data/capture/all-targets.info
        yml: ./.codecov.yml
        name: codecov-umbrella
        flags: unittests
        fail_ci_if_error: false

    - name: Upload Codacy Coverage Report
      if: matrix.ccov == 'ON'
      env:
        CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_TOKEN }}
      run: |
        bash <(curl -Ls https://coverage.codacy.com/get.sh) report --commit-uuid ${{ github.sha }} --force-language CPP -r ./build/ccov/data/capture/cobertura.xml
