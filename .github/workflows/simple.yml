name: build

on:
  push:
    branches-ignore:
      - 'wip-*'
    paths-ignore:
      - 'README.md'

  pull_request:
    branches:
      - 'master'

jobs:
  simple_build:

    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        name:
          - ubuntu-18.04-gcc-7
          - ubuntu-18.04-clang-5.0
          - macOS-10.14-clang

        include:
          - name: ubuntu-18.04-gcc-7
            os: ubuntu-18.04
            compiler: gcc
            version: '7'
            ccov: ON
          - name: ubuntu-18.04-clang-5.0
            os: ubuntu-18.04
            compiler: clang
            version: '5.0'
            ccov: OFF
          - name: macOS-10.14-clang
            os: macOS-10.14
            compiler: xcode
            version: '11.2'
            ccov: ON

    steps:
    - uses: actions/checkout@v2-beta
      with:
        fetch-depth: 5

    - name: Setup Prerequisites (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test --yes
        sudo apt-get update --quiet --yes 1>/dev/null

        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          sudo apt-get install --no-install-recommends --quiet --yes \
            lcov  \
            gcc-${{ matrix.version }}

          echo "::set-env name=CC::gcc-${{ matrix.version }}"
          echo "::set-env name=CXX::g++-${{ matrix.version }}"
        else
          sudo apt-get install --no-install-recommends --quiet --yes \
            clang-${{ matrix.version }}

          echo "::set-env name=CC::clang-${{ matrix.version }}"
          echo "::set-env name=CXX::clang++-${{ matrix.version }}"
        fi

    - name: Setup Prerequisites (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install pkg-config lcov llvm clang-format conan
        pip install cmake-format

        sudo xcode-select -switch /Applications/Xcode_${{ matrix.version }}.app

        echo "::set-env name=CC::clang"
        echo "::set-env name=CXX::clang++"
        echo "::add-path::/usr/local/opt/llvm/bin"

    - uses: actions/cache@v1
      name: Setup conan cache
      id: conan-cache
      with:
        path: ~/.conan
        key: ${{ runner.os }}-conan-${{ hashFiles('**/conanfile.txt') }}
        restore-keys: |
          ${{ runner.os }}-conan-

    - uses: actions/cache@v1
      name: Setup pip cache
      id: pip-cache
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Setup Python
      if: runner.os == 'Linux'
      uses: actions/setup-python@v1
      with:
        version: 3.8
        architecture: x64

    - name: Install dependencies
      if: runner.os == 'Linux'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Configure x64 Debug
      run: |
        $CC --version

        cmake                                  \
            -S .                               \
            -Bbuild                            \
            -DCMAKE_BUILD_TYPE=Debug           \
            -DZEPHIR_BUILD_TESTING=ON          \
            -DENABLE_ALL_WARNINGS=ON           \
            -DCODE_COVERAGE=${{ matrix.ccov }} \
            -D_GLIBCXX_USE_CXX11_ABI=ON

        echo ::set-env name=ZEPHIR_TESTS_ROOT::${GITHUB_WORKSPACE}/tests

    - name: Build x64 Debug
      run: cmake --build build -j "$(getconf _NPROCESSORS_ONLN)"

    - name: Run Tests
      run: cmake --build build --target check

    - name: Generate code coverage report
      if: matrix.ccov == 'ON'
      # TODO(klay): ccov-all-capture works only on gcc, fix it
      run: cmake --build build --target ccov-all-capture

    - name: Upload code coverage report
      if: matrix.ccov == 'ON'
      uses: codecov/codecov-action@v1
      with:
        token: ${{secrets.CODECOV_TOKEN}}
        file: ./build/ccov/all-merged.info
        yml: ./.codecov.yml
        flags: unittests
        fail_ci_if_error: true
