// This file is part of the Zephir.
//
// (c) Zephir Team <team@zephir-lang.com>
//
// For the full copyright and license information, please view
// the LICENSE file that was distributed with this source code.

#include "commands.hpp"

#include <CLI/CLI11.hpp>
#include <memory>
#include <string>

#include "cmd_generate.hpp"
#include "formatter.hpp"
#include "zephir/main.hpp"
#include "zephir/version.hpp"

int zephir::commands::ParseOptions(int argc, char** argv) {
  std::stringstream out;
  out << "Zephir " << std::string(ZEPHIR_VERSION_STRING);
  out << " by Serghei Iakovlev and Alexander Andriiako";

  CLI::App app(out.str(), "zephir");

  std::stringstream footer;
  footer << "See \"" << argv[0] << " <command> --help\"";
  footer << " to read about a specific command or concept.";

  app.footer(footer.str());

  auto fmt = std::make_shared<Formatter>();

  fmt->column_width(17);
  fmt->label("OPTIONS", "options");
  fmt->label("ARGUMENTS", "arguments");
  fmt->label("COMMAND", "command");

  app.formatter(fmt);

  // Global options
  app.add_flag("--dumpversion",
               "Print the version of the compiler and don't do anything else "
               "(also works with a single hyphen)");

  auto help =
      app.set_help_flag("-h, --help", "Print this help message and quit");

  app.add_flag("--vernum",
               "Print the version of the compiler as integer and quit");
  app.add_flag("-V, --version", "Print compiler version information and quit");

  // Commands
  auto commands_group = "Available commands";
  app.add_subcommand(
         "api",
         "Generates a HTML API based on the classes exposed in the extension")
      ->group(commands_group);
  app.add_subcommand("build", "Generates/Compiles/Installs a Zephir extension")
      ->group(commands_group);
  app.add_subcommand("clean",
                     "Cleans any object files created by the extension")
      ->group(commands_group);
  app.add_subcommand("compile", "Compile a Zephir extension")
      ->group(commands_group);
  app.add_subcommand("fullclean",
                     "Cleans any object files created by the extension "
                     "(including files generated by phpize)")
      ->group(commands_group);

  zephir::commands::GenerateCommand generate(&app, commands_group);

  app.add_subcommand("init", "Initializes a Zephir extension")
      ->group(commands_group);
  app.add_subcommand("install",
                     "Installs the extension in the extension directory (may "
                     "require root password)")
      ->group(commands_group);
  app.add_subcommand("stubs", "Generates stubs that can be used in a PHP IDE")
      ->group(commands_group);

  try {
    app.parse(argc, argv);

    if (*help) {
      throw CLI::CallForHelp();
    }
  } catch (const CLI::ParseError& e) {
    int retval = app.exit(e);
    if (e.get_name() == "CallForHelp") {
      retval = EXIT_HELP;
    }

    // TODO(klay): print error message
    return retval;
  }

  return 0;
}
